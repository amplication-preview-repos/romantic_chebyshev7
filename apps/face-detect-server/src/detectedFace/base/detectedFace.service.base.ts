/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  DetectedFace as PrismaDetectedFace,
  RecognizedFace as PrismaRecognizedFace,
  Image as PrismaImage,
  Video as PrismaVideo,
} from "@prisma/client";

export class DetectedFaceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DetectedFaceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.detectedFace.count(args);
  }

  async detectedFaces<T extends Prisma.DetectedFaceFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DetectedFaceFindManyArgs>
  ): Promise<PrismaDetectedFace[]> {
    return this.prisma.detectedFace.findMany<Prisma.DetectedFaceFindManyArgs>(
      args
    );
  }
  async detectedFace<T extends Prisma.DetectedFaceFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DetectedFaceFindUniqueArgs>
  ): Promise<PrismaDetectedFace | null> {
    return this.prisma.detectedFace.findUnique(args);
  }
  async createDetectedFace<T extends Prisma.DetectedFaceCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DetectedFaceCreateArgs>
  ): Promise<PrismaDetectedFace> {
    return this.prisma.detectedFace.create<T>(args);
  }
  async updateDetectedFace<T extends Prisma.DetectedFaceUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DetectedFaceUpdateArgs>
  ): Promise<PrismaDetectedFace> {
    return this.prisma.detectedFace.update<T>(args);
  }
  async deleteDetectedFace<T extends Prisma.DetectedFaceDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DetectedFaceDeleteArgs>
  ): Promise<PrismaDetectedFace> {
    return this.prisma.detectedFace.delete(args);
  }

  async findRecognizedFaces(
    parentId: string,
    args: Prisma.RecognizedFaceFindManyArgs
  ): Promise<PrismaRecognizedFace[]> {
    return this.prisma.detectedFace
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .recognizedFaces(args);
  }

  async getImage(parentId: string): Promise<PrismaImage | null> {
    return this.prisma.detectedFace
      .findUnique({
        where: { id: parentId },
      })
      .image();
  }

  async getVideo(parentId: string): Promise<PrismaVideo | null> {
    return this.prisma.detectedFace
      .findUnique({
        where: { id: parentId },
      })
      .video();
  }
}
