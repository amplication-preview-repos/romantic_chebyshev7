/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DetectedFace } from "./DetectedFace";
import { DetectedFaceCountArgs } from "./DetectedFaceCountArgs";
import { DetectedFaceFindManyArgs } from "./DetectedFaceFindManyArgs";
import { DetectedFaceFindUniqueArgs } from "./DetectedFaceFindUniqueArgs";
import { CreateDetectedFaceArgs } from "./CreateDetectedFaceArgs";
import { UpdateDetectedFaceArgs } from "./UpdateDetectedFaceArgs";
import { DeleteDetectedFaceArgs } from "./DeleteDetectedFaceArgs";
import { RecognizedFaceFindManyArgs } from "../../recognizedFace/base/RecognizedFaceFindManyArgs";
import { RecognizedFace } from "../../recognizedFace/base/RecognizedFace";
import { Image } from "../../image/base/Image";
import { Video } from "../../video/base/Video";
import { DetectedFaceService } from "../detectedFace.service";
@graphql.Resolver(() => DetectedFace)
export class DetectedFaceResolverBase {
  constructor(protected readonly service: DetectedFaceService) {}

  async _detectedFacesMeta(
    @graphql.Args() args: DetectedFaceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DetectedFace])
  async detectedFaces(
    @graphql.Args() args: DetectedFaceFindManyArgs
  ): Promise<DetectedFace[]> {
    return this.service.detectedFaces(args);
  }

  @graphql.Query(() => DetectedFace, { nullable: true })
  async detectedFace(
    @graphql.Args() args: DetectedFaceFindUniqueArgs
  ): Promise<DetectedFace | null> {
    const result = await this.service.detectedFace(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DetectedFace)
  async createDetectedFace(
    @graphql.Args() args: CreateDetectedFaceArgs
  ): Promise<DetectedFace> {
    return await this.service.createDetectedFace({
      ...args,
      data: {
        ...args.data,

        image: args.data.image
          ? {
              connect: args.data.image,
            }
          : undefined,

        video: args.data.video
          ? {
              connect: args.data.video,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => DetectedFace)
  async updateDetectedFace(
    @graphql.Args() args: UpdateDetectedFaceArgs
  ): Promise<DetectedFace | null> {
    try {
      return await this.service.updateDetectedFace({
        ...args,
        data: {
          ...args.data,

          image: args.data.image
            ? {
                connect: args.data.image,
              }
            : undefined,

          video: args.data.video
            ? {
                connect: args.data.video,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DetectedFace)
  async deleteDetectedFace(
    @graphql.Args() args: DeleteDetectedFaceArgs
  ): Promise<DetectedFace | null> {
    try {
      return await this.service.deleteDetectedFace(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [RecognizedFace], { name: "recognizedFaces" })
  async findRecognizedFaces(
    @graphql.Parent() parent: DetectedFace,
    @graphql.Args() args: RecognizedFaceFindManyArgs
  ): Promise<RecognizedFace[]> {
    const results = await this.service.findRecognizedFaces(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Image, {
    nullable: true,
    name: "image",
  })
  async getImage(
    @graphql.Parent() parent: DetectedFace
  ): Promise<Image | null> {
    const result = await this.service.getImage(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Video, {
    nullable: true,
    name: "video",
  })
  async getVideo(
    @graphql.Parent() parent: DetectedFace
  ): Promise<Video | null> {
    const result = await this.service.getVideo(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
