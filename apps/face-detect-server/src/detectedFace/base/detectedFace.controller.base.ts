/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DetectedFaceService } from "../detectedFace.service";
import { DetectedFaceCreateInput } from "./DetectedFaceCreateInput";
import { DetectedFace } from "./DetectedFace";
import { DetectedFaceFindManyArgs } from "./DetectedFaceFindManyArgs";
import { DetectedFaceWhereUniqueInput } from "./DetectedFaceWhereUniqueInput";
import { DetectedFaceUpdateInput } from "./DetectedFaceUpdateInput";
import { RecognizedFaceFindManyArgs } from "../../recognizedFace/base/RecognizedFaceFindManyArgs";
import { RecognizedFace } from "../../recognizedFace/base/RecognizedFace";
import { RecognizedFaceWhereUniqueInput } from "../../recognizedFace/base/RecognizedFaceWhereUniqueInput";

export class DetectedFaceControllerBase {
  constructor(protected readonly service: DetectedFaceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DetectedFace })
  async createDetectedFace(
    @common.Body() data: DetectedFaceCreateInput
  ): Promise<DetectedFace> {
    return await this.service.createDetectedFace({
      data: {
        ...data,

        image: data.image
          ? {
              connect: data.image,
            }
          : undefined,

        video: data.video
          ? {
              connect: data.video,
            }
          : undefined,
      },
      select: {
        boundingBox: true,
        createdAt: true,
        detectionDate: true,
        id: true,

        image: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        video: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DetectedFace] })
  @ApiNestedQuery(DetectedFaceFindManyArgs)
  async detectedFaces(@common.Req() request: Request): Promise<DetectedFace[]> {
    const args = plainToClass(DetectedFaceFindManyArgs, request.query);
    return this.service.detectedFaces({
      ...args,
      select: {
        boundingBox: true,
        createdAt: true,
        detectionDate: true,
        id: true,

        image: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        video: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DetectedFace })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async detectedFace(
    @common.Param() params: DetectedFaceWhereUniqueInput
  ): Promise<DetectedFace | null> {
    const result = await this.service.detectedFace({
      where: params,
      select: {
        boundingBox: true,
        createdAt: true,
        detectionDate: true,
        id: true,

        image: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        video: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DetectedFace })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDetectedFace(
    @common.Param() params: DetectedFaceWhereUniqueInput,
    @common.Body() data: DetectedFaceUpdateInput
  ): Promise<DetectedFace | null> {
    try {
      return await this.service.updateDetectedFace({
        where: params,
        data: {
          ...data,

          image: data.image
            ? {
                connect: data.image,
              }
            : undefined,

          video: data.video
            ? {
                connect: data.video,
              }
            : undefined,
        },
        select: {
          boundingBox: true,
          createdAt: true,
          detectionDate: true,
          id: true,

          image: {
            select: {
              id: true,
            },
          },

          updatedAt: true,

          video: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DetectedFace })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDetectedFace(
    @common.Param() params: DetectedFaceWhereUniqueInput
  ): Promise<DetectedFace | null> {
    try {
      return await this.service.deleteDetectedFace({
        where: params,
        select: {
          boundingBox: true,
          createdAt: true,
          detectionDate: true,
          id: true,

          image: {
            select: {
              id: true,
            },
          },

          updatedAt: true,

          video: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/recognizedFaces")
  @ApiNestedQuery(RecognizedFaceFindManyArgs)
  async findRecognizedFaces(
    @common.Req() request: Request,
    @common.Param() params: DetectedFaceWhereUniqueInput
  ): Promise<RecognizedFace[]> {
    const query = plainToClass(RecognizedFaceFindManyArgs, request.query);
    const results = await this.service.findRecognizedFaces(params.id, {
      ...query,
      select: {
        createdAt: true,

        detectedFace: {
          select: {
            id: true,
          },
        },

        id: true,
        personId: true,
        recognitionDate: true,
        recognitionScore: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/recognizedFaces")
  async connectRecognizedFaces(
    @common.Param() params: DetectedFaceWhereUniqueInput,
    @common.Body() body: RecognizedFaceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recognizedFaces: {
        connect: body,
      },
    };
    await this.service.updateDetectedFace({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/recognizedFaces")
  async updateRecognizedFaces(
    @common.Param() params: DetectedFaceWhereUniqueInput,
    @common.Body() body: RecognizedFaceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recognizedFaces: {
        set: body,
      },
    };
    await this.service.updateDetectedFace({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/recognizedFaces")
  async disconnectRecognizedFaces(
    @common.Param() params: DetectedFaceWhereUniqueInput,
    @common.Body() body: RecognizedFaceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recognizedFaces: {
        disconnect: body,
      },
    };
    await this.service.updateDetectedFace({
      where: params,
      data,
      select: { id: true },
    });
  }
}
