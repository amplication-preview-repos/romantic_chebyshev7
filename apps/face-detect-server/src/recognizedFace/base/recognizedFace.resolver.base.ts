/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { RecognizedFace } from "./RecognizedFace";
import { RecognizedFaceCountArgs } from "./RecognizedFaceCountArgs";
import { RecognizedFaceFindManyArgs } from "./RecognizedFaceFindManyArgs";
import { RecognizedFaceFindUniqueArgs } from "./RecognizedFaceFindUniqueArgs";
import { CreateRecognizedFaceArgs } from "./CreateRecognizedFaceArgs";
import { UpdateRecognizedFaceArgs } from "./UpdateRecognizedFaceArgs";
import { DeleteRecognizedFaceArgs } from "./DeleteRecognizedFaceArgs";
import { DetectedFace } from "../../detectedFace/base/DetectedFace";
import { RecognizedFaceService } from "../recognizedFace.service";
@graphql.Resolver(() => RecognizedFace)
export class RecognizedFaceResolverBase {
  constructor(protected readonly service: RecognizedFaceService) {}

  async _recognizedFacesMeta(
    @graphql.Args() args: RecognizedFaceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [RecognizedFace])
  async recognizedFaces(
    @graphql.Args() args: RecognizedFaceFindManyArgs
  ): Promise<RecognizedFace[]> {
    return this.service.recognizedFaces(args);
  }

  @graphql.Query(() => RecognizedFace, { nullable: true })
  async recognizedFace(
    @graphql.Args() args: RecognizedFaceFindUniqueArgs
  ): Promise<RecognizedFace | null> {
    const result = await this.service.recognizedFace(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => RecognizedFace)
  async createRecognizedFace(
    @graphql.Args() args: CreateRecognizedFaceArgs
  ): Promise<RecognizedFace> {
    return await this.service.createRecognizedFace({
      ...args,
      data: {
        ...args.data,

        detectedFace: args.data.detectedFace
          ? {
              connect: args.data.detectedFace,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => RecognizedFace)
  async updateRecognizedFace(
    @graphql.Args() args: UpdateRecognizedFaceArgs
  ): Promise<RecognizedFace | null> {
    try {
      return await this.service.updateRecognizedFace({
        ...args,
        data: {
          ...args.data,

          detectedFace: args.data.detectedFace
            ? {
                connect: args.data.detectedFace,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RecognizedFace)
  async deleteRecognizedFace(
    @graphql.Args() args: DeleteRecognizedFaceArgs
  ): Promise<RecognizedFace | null> {
    try {
      return await this.service.deleteRecognizedFace(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => DetectedFace, {
    nullable: true,
    name: "detectedFace",
  })
  async getDetectedFace(
    @graphql.Parent() parent: RecognizedFace
  ): Promise<DetectedFace | null> {
    const result = await this.service.getDetectedFace(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
