/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  RecognizedFace as PrismaRecognizedFace,
  DetectedFace as PrismaDetectedFace,
} from "@prisma/client";

export class RecognizedFaceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RecognizedFaceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.recognizedFace.count(args);
  }

  async recognizedFaces<T extends Prisma.RecognizedFaceFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RecognizedFaceFindManyArgs>
  ): Promise<PrismaRecognizedFace[]> {
    return this.prisma.recognizedFace.findMany<Prisma.RecognizedFaceFindManyArgs>(
      args
    );
  }
  async recognizedFace<T extends Prisma.RecognizedFaceFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RecognizedFaceFindUniqueArgs>
  ): Promise<PrismaRecognizedFace | null> {
    return this.prisma.recognizedFace.findUnique(args);
  }
  async createRecognizedFace<T extends Prisma.RecognizedFaceCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RecognizedFaceCreateArgs>
  ): Promise<PrismaRecognizedFace> {
    return this.prisma.recognizedFace.create<T>(args);
  }
  async updateRecognizedFace<T extends Prisma.RecognizedFaceUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RecognizedFaceUpdateArgs>
  ): Promise<PrismaRecognizedFace> {
    return this.prisma.recognizedFace.update<T>(args);
  }
  async deleteRecognizedFace<T extends Prisma.RecognizedFaceDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.RecognizedFaceDeleteArgs>
  ): Promise<PrismaRecognizedFace> {
    return this.prisma.recognizedFace.delete(args);
  }

  async getDetectedFace(parentId: string): Promise<PrismaDetectedFace | null> {
    return this.prisma.recognizedFace
      .findUnique({
        where: { id: parentId },
      })
      .detectedFace();
  }
}
